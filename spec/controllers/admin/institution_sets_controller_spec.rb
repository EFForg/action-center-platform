require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Admin::InstitutionSetsController, type: :controller do
  include Devise::TestHelpers

  # This should return the minimal set of attributes required to create a valid
  # Admin::InstitutionSet. As you add validations to Admin::InstitutionSet, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "US Colleges and Universities" }
  }

  let(:invalid_attributes) {
    { name: "" }
  }

  before(:each) do
    @request.env["devise.mapping"] = Devise.mappings[:admin]
    sign_in FactoryGirl.create(:admin_user)
  end

  describe "GET #index" do
    it "assigns all institution_sets as @institution_sets" do
      institution_set = InstitutionSet.create! valid_attributes
      get :index, {}
      expect(assigns(:institution_sets)).to eq([institution_set])
    end
  end

  describe "GET #show" do
    it "assigns the requested institution_set as @institution_set" do
      institution_set = InstitutionSet.create! valid_attributes
      get :show, {:id => institution_set.to_param}
      expect(assigns(:institution_set)).to eq(institution_set)
    end
  end

  describe "GET #new" do
    it "assigns a new institution_set as @institution_set" do
      get :new, {}
      expect(assigns(:institution_set)).to be_a_new(InstitutionSet)
    end
  end

  describe "GET #edit" do
    it "assigns the requested institution_set as @institution_set" do
      institution_set = InstitutionSet.create! valid_attributes
      get :edit, {:id => institution_set.to_param}
      expect(assigns(:institution_set)).to eq(institution_set)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new InstitutionSet" do
        expect {
          post :create, {:institution_set => valid_attributes}
        }.to change(InstitutionSet, :count).by(1)
      end

      it "assigns a newly created institution_set as @institution_set" do
        post :create, {:institution_set => valid_attributes}
        expect(assigns(:institution_set)).to be_a(InstitutionSet)
        expect(assigns(:institution_set)).to be_persisted
      end

      it "redirects to the created institution_set" do
        post :create, {:institution_set => valid_attributes}
        expect(response).to redirect_to([:admin, InstitutionSet.last])
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved institution_set as @institution_set" do
        post :create, {:institution_set => invalid_attributes}
        expect(assigns(:institution_set)).to be_a_new(InstitutionSet)
      end

      it "re-renders the 'new' template" do
        post :create, {:institution_set => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { name: "International Colleges and Universities" }
      }

      it "updates the requested institution_set" do
        institution_set = InstitutionSet.create! valid_attributes
        put :update, {:id => institution_set.to_param, :institution_set => new_attributes}
        institution_set.reload
        expect(institution_set.name).to eq(new_attributes[:name])
      end

      it "assigns the requested institution_set as @institution_set" do
        institution_set = InstitutionSet.create! valid_attributes
        put :update, {:id => institution_set.to_param, :institution_set => valid_attributes}
        expect(assigns(:institution_set)).to eq(institution_set)
      end

      it "redirects to the institution_set" do
        institution_set = InstitutionSet.create! valid_attributes
        put :update, {:id => institution_set.to_param, :institution_set => valid_attributes}
        expect(response).to redirect_to([:admin, institution_set])
      end
    end

    context "with invalid params" do
      it "assigns the institution_set as @institution_set" do
        institution_set = InstitutionSet.create! valid_attributes
        put :update, {:id => institution_set.to_param, :institution_set => invalid_attributes}
        expect(assigns(:institution_set)).to eq(institution_set)
      end

      it "re-renders the 'edit' template" do
        institution_set = InstitutionSet.create! valid_attributes
        put :update, {:id => institution_set.to_param, :institution_set => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested institution_set" do
      institution_set = InstitutionSet.create! valid_attributes
      expect {
        delete :destroy, {:id => institution_set.to_param}
      }.to change(InstitutionSet, :count).by(-1)
    end

    it "redirects to the institution_sets list" do
      institution_set = InstitutionSet.create! valid_attributes
      delete :destroy, {:id => institution_set.to_param}
      expect(response).to redirect_to(admin_institution_sets_url)
    end
  end

end
